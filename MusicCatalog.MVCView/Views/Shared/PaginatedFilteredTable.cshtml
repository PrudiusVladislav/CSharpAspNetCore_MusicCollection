@model MusicCatalog.MVCView.ViewModels.Shared.PaginatedFilteredViewModel

<div>
    <form method="get" asp-controller="@Model.ControllerName" asp-action="@Model.ActionName" asp-all-route-data="@Model.GetRouteValues(page: 1)">
        <input asp-for="SortColumn" hidden>
        <input asp-for="SortDirection" hidden>
        <input asp-for="Sorting" hidden>
        <input asp-for="PageSize" hidden>
        <input asp-for="CurrentPage" hidden>
        <div class="search-form">
            <input class="form-control" asp-for="SearchTerm" placeholder="Search...">
            <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </form>
    <div>
        @{
            var createModal = Model.GetCreateModal();
            <button class="btn btn-info" type="button" data-bs-toggle="modal" data-bs-target="#@createModal.Id">Create</button>
            @await Html.PartialAsync("~/Views/Shared/Modal.cshtml", createModal)
        }
    </div>
    <table class="table">
        <thead>
        @foreach (var column in Model.Columns)
        {
            <th>
                <a class="column-header"
                   asp-controller="@Model.ControllerName"
                   asp-action="@Model.ActionName"
                   asp-all-route-data="@Model.GetRouteValues(sortColumn: column, page: 1, isSortChanged: true)">
                    @column
                </a>

                @{
                    var sorting = Model.Sorting;
                    var isSortingColumn = sorting.Contains(column);
                    
                    if (isSortingColumn && sorting.EndsWith("ascending", StringComparison.OrdinalIgnoreCase))
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-down" viewBox="0 0 16 16">
                            <path d="M3.5 2.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 11.293V2.5zm3.5 1a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"/>
                        </svg>
                    }
                    else if (isSortingColumn && sorting.EndsWith("descending", StringComparison.OrdinalIgnoreCase))
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-sort-up" viewBox="0 0 16 16">
                            <path d="M3.5 12.5a.5.5 0 0 1-1 0V3.707L1.354 4.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.498.498 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L3.5 3.707V12.5zm3.5-9a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zM7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1h-5zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1h-3zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1h-1z"/>
                        </svg>
                    }
                }
            </th>
        }
        </thead>
        <tbody>
        @foreach (var dataModel in Model.Models)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    var valueType = Model.ColumnValues[dataModel.Id][column];

                    switch (valueType.Type)
                    {
                        case "select":
                            <td>
                                @{
                            var modal = Model.GetModal(dataModel, column);
                            <button class="btn btn-outline-primary" type="button" data-bs-toggle="modal" data-bs-target="#@modal.Id">View @column details</button>
                            @await Html.PartialAsync("~/Views/Shared/Modal.cshtml", modal)
                                }
                            </td>
                            break;
                        default:
                            <td>@valueType.Value</td>
                            break;
                    }
                }
                <td>
                    @{
                        var updateModal = Model.GetUpdateModal(dataModel);
                        <button class="btn btn-warning" type="button" data-bs-toggle="modal" data-bs-target="#@updateModal.Id">Update</button>
                        @await Html.PartialAsync("~/Views/Shared/Modal.cshtml", updateModal)
                    }
                </td>
                <td>
                    @{
                        <a class="btn btn-danger" type="button"
                                asp-controller="@Model.ControllerName"
                                asp-action="Delete" asp-route-id="@dataModel.Id">
                            Delete
                        </a>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
    <div class="pagination">
        <a class="btn btn-primary pagination-button" asp-controller="@Model.ControllerName" asp-action="@Model.ActionName" asp-all-route-data="@Model.GetRouteValues(page: 1)">First</a>
        @if (Model.CurrentPage == 1)
        {
            <div class="btn btn-secondary pagination-button">Previous</div>
        }
        else
        {
            <a class="btn btn-primary pagination-button" asp-controller="@Model.ControllerName" asp-action="@Model.ActionName" asp-all-route-data="@Model.GetRouteValues(page: Model.CurrentPage - 1)">Previous</a>
        }
        <form method="get" asp-controller="@Model.ControllerName" asp-action="@Model.ActionName" asp-all-route-data="@Model.GetRouteValues()">
            <input asp-for="SearchTerm" hidden>
            <input asp-for="SortColumn" hidden>
            <input asp-for="SortDirection" hidden>
            <input asp-for="Sorting" hidden>
            <input asp-for="PageSize" hidden>
            <input type="number" min="1" max="@Model.TotalPages" value="@Model.CurrentPage" name="page">
            <button type="submit" class="btn btn-primary pagination-button">Go</button>
        </form>
        @if (Model.CurrentPage == Model.TotalPages)
        {
            <div class="btn btn-secondary pagination-button">Next</div>
        }
        else
        {
            <a class="btn btn-primary pagination-button" asp-controller="@Model.ControllerName" asp-action="@Model.ActionName" asp-all-route-data="@Model.GetRouteValues(page: Model.CurrentPage + 1)">Next</a>
        }
        <a class="btn btn-primary pagination-button" asp-controller="@Model.ControllerName" asp-action="@Model.ActionName" asp-all-route-data="@Model.GetRouteValues(page: Model.TotalPages)">Last</a>
    </div>
</div>

<style>
    .search-form {
        display: flex;
        justify-content: center;
        align-items: center;
    }
    
    a.column-header {
        text-decoration: none;
        /*color: var(--bs-light);*/
    }
    
    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
    }
    
    .pagination .pagination-button {
        margin: 0 0.2rem;
    }
</style>



